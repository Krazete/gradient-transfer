from gradient_transfer import getColormap, applyColormap
from PIL import Image, ImageMath

pngs = [
    '_annie0_by_krazete',
    '_molly0_by_krazete',
    '_umbrella0_by_krazete',
    '_umbrella1_by_krazete',
    'Annie_AgelessWonder',
    'Annie_GalaxyGlamour',
    'Annie_HeatSynced',
    'Annie_MateriaGirl',
    'Annie_ModelLeader',
    'Annie_Moonstruck',
    'Annie_NinjaStar',
    'Annie_Portrait',
    'Annie_SolarFlair',
    'Annie_StarChild',
    'Annie_StarShine',
    'Annie_TimelessHero',
    'Annie_TripleThreat',
    'Beowulf_BeastKing',
    'Beowulf_ColdStones',
    'Beowulf_DarkMight',
    'Beowulf_DragonBrawler',
    'Beowulf_FreedomFighter',
    'Beowulf_HypeMan',
    'Beowulf_NumberOne',
    'Beowulf_Portrait',
    'Beowulf_SnakeBite',
    'Beowulf_Underdog',
    'Beowulf_WeekendWarrior',
    'Beowulf_WrestlerX',
    'Beowulf_Wulfsbane',
    'BigBand_Bassline',
    'BigBand_Beatbox',
    'BigBand_DreamBand',
    'BigBand_EpicSax',
    'BigBand_GIJazz',
    'BigBand_HeavyMetal',
    'BigBand_Megasonic',
    'BigBand_Portrait',
    'BigBand_PrivateDick',
    'BigBand_ResonantEvil',
    'BigBand_Robocopy',
    'BigBand_TrebleMaker',
    'BigBand_VintageVirtuoso',
    'cat',
    'Cerebella_ArmedForces',
    'Cerebella_BigTop',
    'Cerebella_BlitzAndGlamour',
    'Cerebella_BrainFreeze',
    'Cerebella_CriminalMind',
    'Cerebella_GrayMatter',
    'Cerebella_Harlequin',
    'Cerebella_Headstrong',
    'Cerebella_HeavyHanded',
    'Cerebella_Portrait',
    'Cerebella_StarSpangled',
    'Cerebella_ToadWarrior',
    'Cerebella_Understudy',
    'Double_CreatureOfHabit',
    'Double_Doublicious',
    'Double_EvergreenEvil',
    'Double_HeartOfDarkness',
    'Double_ImmoralFiber',
    'Double_Jawbreaker',
    'Double_MystMatch',
    'Double_Nunsense',
    'Double_Portrait',
    'Double_RainbowBlight',
    'Double_SundaeSchool',
    'Double_TempleTyrant',
    'Double_Xenomorph',
    'Eliza_Bloodbath',
    'Eliza_BloodyValentine',
    'Eliza_Decrypted',
    'Eliza_DivaIntervention',
    'Eliza_InDenile',
    'Eliza_InnerPieces',
    'Eliza_LapisLuxury',
    'Eliza_MummyDearest',
    'Eliza_Portrait',
    'Eliza_RedVelvet',
    'Eliza_Revamped',
    'Eliza_ScarletViper',
    'Eliza_TombAndGloom',
    'Filia_BadHairDay',
    'Filia_BadMsFrosty',
    'Filia_ClassCutter',
    'Filia_DjinnFrizz',
    'Filia_Dreadlocks',
    'Filia_FrayedEnds',
    'Filia_HairApparent',
    'Filia_IdolThreat',
    'Filia_ParasiteWeave',
    'Filia_Portrait',
    'Filia_RockStar',
    'Filia_Windswept',
    'Fukua_ChameleonTwist',
    'Fukua_DreamDemon',
    'Fukua_FeatheredEdges',
    'Fukua_InfernalTwin',
    'Fukua_NightTerror',
    'Fukua_PhantomThreads',
    'Fukua_Portrait',
    'Fukua_RainShadow',
    'Fukua_RoughCopy',
    'Fukua_ShadowPuppet',
    'Fukua_SoulsSister',
    'Fukua_SplittingImage',
    'Fukua_VaporwaveVixen',
    'HeavyMetal',
    'MsFortune_ClawAndOrder',
    'MsFortune_FelineLucky',
    'MsFortune_FurryFury',
    'MsFortune_HackNSplash',
    'MsFortune_Hellcat',
    'MsFortune_JustKitten',
    'MsFortune_MeowAndFurever',
    'MsFortune_MsTrial',
    'MsFortune_Portrait',
    'MsFortune_PurrfectDark',
    'MsFortune_RogueAgent',
    'MsFortune_TimeThief',
    'MsFortune_WindStalker',
    'Painwheel_BitingCold',
    'Painwheel_BloodDrive',
    'Painwheel_Buzzkill',
    'Painwheel_Firefly',
    'Painwheel_FlyTrap',
    'Painwheel_FreakyFriday',
    'Painwheel_GrimFan',
    'Painwheel_Neuromancer',
    'Painwheel_Portrait',
    'Painwheel_RageAppropriate',
    'Painwheel_RawNerv',
    'Painwheel_Rusty',
    'Painwheel_TwistedMettle',
    'Parasoul_HeavyReign',
    'Parasoul_HighRuler',
    'Parasoul_IvyLeague',
    'Parasoul_NoEgrets',
    'Parasoul_Portrait',
    'Parasoul_Primed',
    'Parasoul_PrincessPride',
    'Parasoul_RegallyBlonde',
    'Parasoul_RiskyGinger',
    'Parasoul_ShadowOps',
    'Parasoul_Sheltered',
    'Parasoul_StarCrossed',
    'Parasoul_SummerSalt',
    'Peacock_DreamCatcher',
    'Peacock_FreezeFrame',
    'Peacock_Inkling',
    'Peacock_MeanOne',
    'Peacock_PeaShooter',
    'Peacock_Portrait',
    'Peacock_PrismPlumage',
    'Peacock_Rerun',
    'Peacock_Sketchy',
    'Peacock_ThatsAllFolks',
    'Peacock_Ultraviolent',
    'Peacock_Untouchable',
    'Peacock_Wildcard',
    'RoboFortune_BlueBomber',
    'RoboFortune_BlueScreen',
    'RoboFortune_HeadHunter',
    'RoboFortune_M-3OW',
    'RoboFortune_Nyanotech',
    'RoboFortune_Overclocked',
    'RoboFortune_PersonaAssistant',
    'RoboFortune_Portrait',
    'RoboFortune_Prototype',
    'RoboFortune_Purrminator',
    'RoboFortune_TerrorByte',
    'RoboFortune_VectorProtector',
    'RoboFortune_XBot',
    'Squigly_BioExorcist',
    'Squigly_DeadHeat',
    'Squigly_DeadOfWinter',
    'Squigly_GangGreen',
    'Squigly_LoveCrafted',
    'Squigly_NearlyDeparted',
    'Squigly_Necrobreaker',
    'Squigly_PlotTwisted',
    'Squigly_Poltergust',
    'Squigly_Portrait',
    'Squigly_ScaredStiff',
    'Squigly_StageFright',
    'Squigly_ThrillShrieker',
    'Squigly_WyrmsTail',
    'Valentine_AssassinsGreed',
    'Valentine_GraveyardShift',
    'Valentine_IcyHot',
    'Valentine_KillJoy',
    'Valentine_LastHope',
    'Valentine_OhMai',
    'Valentine_Portrait',
    'Valentine_PyroTechnique',
    'Valentine_Scrub',
    'Valentine_SilentKill',
    'Valentine_SurgeonGeneral',
    'Valentine_TresChic',
    'Valentine_Wetwork'
]

def petrify_sprite(im, spectral_ids=[]):
    'Return grayscale version of codified sprite, with spectral areas rendered translucent.'
    r = im.getchannel(0) # palette
    g = im.getchannel(1) # linework
    b = im.getchannel(2) # detail

    # mask detail with palette areas and subtract inverted linework
    sprite = ImageMath.eval('convert((r > 0) * b - (0xFF - g), "L")', r=r, g=g, b=b)

    if len(spectral_ids):
        spectral_areas = ' + '.join('(r == {})'.format(id) for id in spectral_ids)
        # create scaled binary mask of palette areas minus spectral areas
        opaque = ImageMath.eval('convert(0xFF * (r > 0) * (1 - (' + spectral_areas + ')), "L")', r=r)
        # mask detail with spectral areas and scale to adjust intensity
        translucent = ImageMath.eval('convert(0xFF * (b * (' + spectral_areas + ') - 0x64) / (0xFF - 0x64), "L")', r=r, b=b)
        # add together opaque mask, translucent mask, and inverted linework
        a = ImageMath.eval('convert(o + t + (0xFF - g), "L")', o=opaque, t=translucent, g=g)
    else:
        # create scaled binary mask of palette areas and add inverted linework
        a = ImageMath.eval('convert(0xFF * (r > 0) + (0xFF - g), "L")', r=r, g=g)

    sprite.putalpha(a)
    return sprite

colormap = getColormap(Image.open('./GiftIcon_Gold.png'))
for png in pngs:
    if 'Portrait' in png:
        try:
            sprite = petrify_sprite(Image.open('../../../../GitHub/sgmpalette/sprite/{}.png'.format(png)).convert('RGBA'), [133])
            colored = applyColormap(sprite, colormap)
            colored.save('./gilded/{}.png'.format(png))
        except Exception as e:
            print(png, e)
